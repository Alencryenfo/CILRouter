version: '3.8'

services:
  cilrouter:
    build: .
    ports:
      - "${PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      # 服务器配置
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      
      # 当前供应商索引
      - CURRENT_PROVIDER_INDEX=${CURRENT_PROVIDER_INDEX:-0}
      
      # 超时配置
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-60}
      - STREAM_TIMEOUT=${STREAM_TIMEOUT:-120}
      
      # 鉴权配置
      - AUTH_KEY=${AUTH_KEY:-}
      
      # 限流配置（v1.0.1新功能）
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-false}
      - RATE_LIMIT_RPM=${RATE_LIMIT_RPM:-100}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-10}
      - RATE_LIMIT_TRUST_PROXY=${RATE_LIMIT_TRUST_PROXY:-true}
      
      # 供应商配置（支持逗号分隔的多端点负载均衡）
      - PROVIDER_0_BASE_URL=${PROVIDER_0_BASE_URL:-}
      - PROVIDER_0_API_KEY=${PROVIDER_0_API_KEY:-}
      
      - PROVIDER_1_BASE_URL=${PROVIDER_1_BASE_URL:-}
      - PROVIDER_1_API_KEY=${PROVIDER_1_API_KEY:-}
      
      - PROVIDER_2_BASE_URL=${PROVIDER_2_BASE_URL:-}
      - PROVIDER_2_API_KEY=${PROVIDER_2_API_KEY:-}
      
      - PROVIDER_3_BASE_URL=${PROVIDER_3_BASE_URL:-}
      - PROVIDER_3_API_KEY=${PROVIDER_3_API_KEY:-}
      
      - PROVIDER_4_BASE_URL=${PROVIDER_4_BASE_URL:-}
      - PROVIDER_4_API_KEY=${PROVIDER_4_API_KEY:-}
    
    # 挂载配置和日志目录
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs:rw
    
    # 重启策略
    restart: unless-stopped
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # 资源限制（生产环境推荐）
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # 网络配置
    networks:
      - cilrouter-network

  # 可选：添加Redis用于分布式限流（未来功能）
  # redis:
  #   image: redis:alpine
  #   restart: unless-stopped
  #   networks:
  #     - cilrouter-network
  #   volumes:
  #     - redis-data:/data

networks:
  cilrouter-network:
    driver: bridge

volumes:
  # redis-data:  # 预留给Redis功能
  logs: